These are just notes as I am debugging.
Please refer to the README for just the build steps.

----

first install conda
conda install conda-build

trying to package lrose-core now

NOTE: I had to install the C++ compilers as an external step; I wonder if the conda-forge 
build and deploy system will need the C++ compilers specified in the meta.yaml file?

$ conda build .


  environment location: /Users/brenda/miniconda3/conda-bld/my-core2_1694565309776/_build_env

source tree in: /Users/brenda/miniconda3/conda-bld/my-core2_1694565309776/work
export PREFIX=/Users/brenda/miniconda3/conda-bld/my-core2_1694565309776/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_
export BUILD_PREFIX=/Users/brenda/miniconda3/conda-bld/my-core2_1694565309776/_build_env
export      SRC_DIR=/Users/brenda/miniconda3/conda-bld/my-core2_1694565309776/work

Error: cannot find Qt5-Config.cmake
conda build installs these packages
    qt:               5.15.8-h93fa01e_0         conda-forge
    qt-main:          5.15.8-hc03889f_16        conda-forge
    qt-webengine:     5.15.8-h66b1b81_1         conda-forge

Qt is installed here ...
(base) brenda@Locals-MacBook-Air ~ % ls /Users/brenda/miniconda3/pkgs/qt*
/Users/brenda/miniconda3/pkgs/qt-5.15.8-h93fa01e_0.conda
/Users/brenda/miniconda3/pkgs/qt-5.15.9-hecd8cb5_0.conda
/Users/brenda/miniconda3/pkgs/qt-main-5.15.2-hf83fbd5_10.conda
/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16.conda
/Users/brenda/miniconda3/pkgs/qt-webengine-5.15.8-h66b1b81_1.conda
/Users/brenda/miniconda3/pkgs/qt-webengine-5.15.9-h90a370e_7.conda

/Users/brenda/miniconda3/pkgs/qt-5.15.8-h93fa01e_0:
info

/Users/brenda/miniconda3/pkgs/qt-5.15.9-hecd8cb5_0:
info

/Users/brenda/miniconda3/pkgs/qt-main-5.15.2-hf83fbd5_10:
bin		include		lib		phrasebooks	qml		translations
doc		info		mkspecs		plugins		share

/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16:
bin		include		lib		phrasebooks	qml		translations
doc		info		mkspecs		plugins		share

/Users/brenda/miniconda3/pkgs/qt-webengine-5.15.8-h66b1b81_1:
bin		info		libexec		plugins		resources
include		lib		mkspecs		qml		translations

/Users/brenda/miniconda3/pkgs/qt-webengine-5.15.9-h90a370e_7:
bin		info		libexec		plugins		resources
include		lib		mkspecs		qml		translations

For Qt, we probably want to change the CMAKE script to use something different than Qt5Config.cmake??
Qt packages are installed, but they are conda-forge packages and do not contain Qt5Config.cmake, etc.
Not sure how to proceed with the build??

==> I had to use "conda install qt" to install the Qt5Config.cmake files; just like I had to do for gcc, etc.

/Users/brenda/miniconda3 path is ignored in CMAKE scripts, so the Qt installation is never found.
Removing the IGNORE paths in the CMAKE scripts gets past the Qt5_DIR not found error.

---------------------
build/cmake/createCMakeLists.py:    # fo.write('set(CMAKE_IGNORE_PREFIX_PATH "$ENV{HOME}/anaconda3;$ENV{HOME}/anaconda2")\n')
build/cmake/createCMakeLists.py:    # fo.write('message("CMAKE_IGNORE_PREFIX_PATH: ${CMAKE_IGNORE_PREFIX_PATH}")\n')
----------------------

Even with the Qt5_DIR path fixed, there are problems with the Frameworks needed to build and package qtplot which uses Qt5.

Not sure how to proceed?  
Maybe just install Qt5, like gcc is installed? into the base computer image?

In order to sumbit the conda-forge recipe to the conda-forge channel, we need to be able to build in a virtual/container environment.  We cannot be packaging on our own special computer environment.  

---------

try conda mambabuild .
https://boa-build.readthedocs.io/en/latest/mambabuild.html


-----------

I'm using the old way of building lrose-core; not the cmake way.

stuck here ...
In file included from Cf2RadxFile_read.cc:36:
In file included from ../include/Radx/Cf2RadxFile.hh:52:
/tmp/mylrosetest/include/Ncxx/Ncxx.hh:66:10: fatal error: 'netcdf.h' file not found
#include <netcdf.h>
         ^~~~~~~~~~
1 error generated.
In file included from Cf2RadxFile_write.cc:36:
In file included from ../include/Radx/Cf2RadxFile.hh:52:
/tmp/mylrosetest/include/Ncxx/Ncxx.hh:66:10: fatal error: 'netcdf.h' file not found
#include <netcdf.h>
         ^~~~~~~~~~

The problem is, netcdf is installed within the sandbox/build environment that conda build
sets up.  For conda-forge to use this recipe, we need to reference netcdf in the sandbox,
NOT on the system.  How to modify the -I path from the make command?

I think we need to add a variable to the make files so that we can set the path
to the include files for 3rd party software that is "expected" to be on the system, 
and is installed in the conda-forge sandbox.  Then, we can send a variable value
for the path to the sandbox on the commandline to the 'make install' command
inside the build.sh script.

10/6/2023 
Talked with Mike about adding or resetting a make variable to add the conda build 
sandbox into the -I or -L compile line.  Mike suggested modifying the top
level CMakeFileList files to add the conda build sandbox path.  I think the
path changes for each build, so I should probably use the SRC_DIR environment
variable that conda build supplies.

---- 

getting this error:

CMake Error: AUTOUIC for target qtplot: Test run of "uic" executable "/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/uic" failed.
/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/uic -h

dyld[50975]: Library not loaded: '@rpath/libicui18n.73.dylib'
  Referenced from: '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/libQt5Core.5.15.8.dylib'
  Reason: tried: '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/usr/local/lib/libicui18n.73.dylib' (no such file), '/usr/lib/libicui18n.73.dylib' (no such file)
Subprocess aborted


try no Qt, and package Radx only, no visualizations.

Need to remove all apps that use Qt from the CMakeLists.txt files: HawkEdit, HawkEye, IpsEye, Sprite
Need to remova qtplot from libs CMakeLists.txt file.

In the createCMakefile script remove the ANACONDA ignore path.
or set a flag to ignore this.

now getting this error:

[ 16%] Building CXX object apps/titan/src/AcPosnAscii2Spdb/CMakeFiles/AcPosnAscii2Spdb.dir/Filter.cc.o
[ 16%] Building CXX object apps/titan/src/AcPosnAscii2Spdb/CMakeFiles/AcPosnAscii2Spdb.dir/Main.cc.o
[ 16%] Linking CXX executable AcPosnAscii2Spdb
ld: warning: directory not found for option '-L/tmp/mylrosetest/bin/lib'
ld: warning: directory not found for option '-L/tmp/mylrosetest/bin/lib'
ld: library not found for -lnetcdf
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [apps/titan/src/AcPosnAscii2Spdb/AcPosnAscii2Spdb] Error 1
make[1]: *** [apps/titan/src/AcPosnAscii2Spdb/CMakeFiles/AcPosnAscii2Spdb.dir/all] Error 2
make: *** [all] Error 2

monkey with this ... netCDF_INSTALL_PREFIX in the createCMakeLists.py

Try setting this as an environment variable ...
NETCDF4_LDFLAGS
didn't work

Try the -D on the command line
 cmake  --debug-output -DnetCDF_INSTALL_PREFIX=/Users/brenda/...
didn't work


10/9/2023
remove cidd from libs/CMakeLists.txt 
       rapplot
**** warnings: sprinf is deprecated; use snprintf

10/11/2023
Just work through the cmake files to add the path.
cd ${SRC_DIR}/codebase; mkdir build;  cd build;  cmake ..
netCDF_INSTALL_PREFIX=/Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112

    fo.write("if (DEFINED netCDF_INSTALL_PREFIX)\n")
    fo.write("  include_directories (${netCDF_INSTALL_PREFIX}/include)\n")


----

from /Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work/codebase/build/apps/Radx/src/RadxConvert/CMakeFiles/RadxConvert.dir
/link.txt 
/Library/Developer/CommandLineTools/usr/bin/c++
  -fPIC -std=c++11  -DNO_JASPER_LIB  
  -isysroot 
  /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk -mmacosx-version-min=10.9 -Wl,-search_paths_first -Wl,-headerpad_max_install_names 
-L/tmp/mylrosetest/lib CMakeFiles/RadxConvert.dir/Params.cc.o CMakeFiles/RadxConvert.dir/Args.cc.o CMakeFiles/RadxConvert.dir/Main.cc.o CMakeFiles/RadxConvert.dir/RadxConvert.cc.o CMakeFiles/RadxConvert.dir/VarTransform.cc.o -o RadxConvert   
-L/tmp/mylrosetest/lib  
-L/usr/local/lib  
-Wl,-rpath,/tmp/mylrosetest/lib 
-Wl,-rpath,/usr/local/lib 
../../../../libs/dsdata/src/libdsdata.a
 ../../../../libs/radar/src/libradar.a
 ../../../../libs/Mdv/src/libMdv.a
 ../../../../libs/Spdb/src/libSpdb.a
 ../../../../libs/Fmq/src/libFmq.a
 ../../../../libs/rapformats/src/librapformats.a
 ../../../../libs/dsserver/src/libdsserver.a
 ../../../../libs/didss/src/libdidss.a
 ../../../../libs/euclid/src/libeuclid.a
 ../../../../libs/rapmath/src/librapmath.a
 ../../../../libs/toolsa/src/libtoolsa.a
 ../../../../libs/dataport/src/libdataport.a
 ../../../../libs/tdrp/src/libtdrp.a
 ../../../../libs/Radx/src/libRadx.a
 ../../../../libs/Ncxx/src/libNcxx.a
 ../../../../libs/physics/src/libphysics.a 
 -lnetcdf -lhdf5_hl -lhdf5 -lz -lbz2 -lfftw3 -lbz2 -lz -lpthread -lfftw3 -lpthread 


from the offending titan/Ac...
/Library/Developer/CommandLineTools/usr/bin/c++  
-fPIC 
-std=c++11  
-DNO_JASPER_LIB  
-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk 
-mmacosx-version-min=10.9 
-Wl,-search_paths_first 
-Wl,-headerpad_max_install_names 
-L/tmp/mylrosetest/lib CMakeFiles/AcPosnAscii2Spdb.dir/Params.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/AcPosnAscii2Spdb.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Args.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Filter.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Main.cc.o 
-o AcPosnAscii2Spdb   
-L/tmp/mylrosetest/lib  
-L/usr/local/lib  
-Wl,-rpath,/tmp/mylrosetest/lib 
-Wl,-rpath,/usr/local/lib ../../../../libs/Spdb/src/libSpdb.a ../../../../libs/rapformats/src/librapformats.a ../../../../libs/dsserver/src/libdsserver.a ../../../../libs/didss/src/libdidss.a ../../../../libs/euclid/src/libeuclid.a ../../../../libs/rapmath/src/librapmath.a ../../../../libs/toolsa/src/libtoolsa.a ../../../../libs/dataport/src/libdataport.a ../../../../libs/tdrp/src/libtdrp.a ../../../../libs/physics/src/libphysics.a 
-lpthread 
-lnetcdf 
-lNETCDF_LIBRARY-NOTFOUND 
-lhdf5_hl 
-lhdf5 
-lz 
-lbz2 
-lbz2 
-lz 
-lm 



10/18/2023
Use the cmake command
find_package(netCDF) # this will use the libnetCDF???.cmake file to set some variables like LDFLAGS, etc.

These are named like this <pkg>Config.cmake
	netCDFConfig.cmake
        Qt5Config.cmake


OK, where is the link command?! 
/Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work/codebase/build/apps/titan/src/AcPosnAscii2Spdb/CMakeFiles/AcPosnAscii2Spdb.dir/link.txt

But, link.txt has not changed, even though I changed the  build/cmake/createCMakeLists.py file to find_package (netCDF) and not IGNORE miniconda3

CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
NETCDF_LIBRARY
    linked by target "AcPosnAscii2Spdb" in directory /Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work/codebase/apps/titan/src/AcPosnAscii2Spdb
I removed the line that was generating the NETCDF_LIBRARY NOTFOUND error

Now, link.txt is updated.

--- 10/20/2023
focus on the target_link_library command in cmake.

adding this to createCMakeLists.py
    fo.write("# libraries \n")
    fo.write("\n")
    fo.write("target_link_libraries (%s /Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib/libnetcdf.dylib )\n" % appName)
    fo.write("\n")

instead try for this ... since netcdf supplies a .cmake configuration file.
/Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib/cmake/netCDF/netCDFConfig.cmake


    fo.write('find_package (netCDF REQUIRED CONFIG PATHS /Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib/cmake/netCDF /Users/brenda/miniconda3/pkgs)\n')

find_package (netCDF REQUIRED PATHS)
include_directores ($(netCDF_INCLUDE_DIR))
add_executable (myexe generated.c)
target_link_libraries (myexe netCDF) # link to imported library

I'm not seeing a change in the link.txt file for titan/AcPosn...

-- Build files have been written to: /Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work/codebase/build

X11_LIB_DIR: 
HDF5_INSTALL_PREFIX: /tmp/mylrosetest
HDF5_C_INCLUDE_DIR: /tmp/mylrosetest/include
CMAKE_INSTALL_PREFIX is /tmp/mylrosetest


Now, link.txt is ...

(base) brenda@Locals-MacBook-Air AcPosnAscii2Spdb.dir % cat link.txt
/Library/Developer/CommandLineTools/usr/bin/c++  -fPIC -std=c++11  -DNO_JASPER_LIB  -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk -mmacosx-version-min=10.9 -Wl,-search_paths_first -Wl,-headerpad_max_install_names 
-L/tmp/mylrosetest/lib CMakeFiles/AcPosnAscii2Spdb.dir/Params.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/AcPosnAscii2Spdb.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Args.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Filter.cc.o CMakeFiles/AcPosnAscii2Spdb.dir/Main.cc.o -o AcPosnAscii2Spdb   
-L/tmp/mylrosetest/lib  
-L/Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib  
-L/usr/local/lib  -Wl,-rpath,/tmp/mylrosetest/lib -Wl,-rpath,/Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib -Wl,-rpath,/Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib -Wl,-rpath,/usr/local/lib ../../../../libs/Spdb/src/libSpdb.a ../../../../libs/rapformats/src/librapformats.a ../../../../libs/dsserver/src/libdsserver.a ../../../../libs/didss/src/libdidss.a ../../../../libs/euclid/src/libeuclid.a ../../../../libs/rapmath/src/librapmath.a ../../../../libs/toolsa/src/libtoolsa.a ../../../../libs/dataport/src/libdataport.a ../../../../libs/tdrp/src/libtdrp.a ../../../../libs/physics/src/libphysics.a -lpthread -lnetcdf -lhdf5_hl -lhdf5 -lz -lbz2 -lbz2 -lz -lm /Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib/libnetcdf.dylib -lnetCDF 

This looks promising!!

==> Yes, it seems to be working.  I have had to comment a lot of the apps, and libs
HawkEye, HawkEdit, Sprite, IpsEye, cidd, titan, qtplot.
qtplot, cidd, ???

Do something similar for Qt and for X11.  Use the .cmake files to get the info for the LDLIB_FLAGS, etc.

Create a branch in the lrose-bootstrap project and include the changes needed for conda-forge packaging.


----

Doing something similar for Qt5, works but gets caught with this ...
dyld[5727]: Library not loaded: '@rpath/libicui18n.73.dylib'
  Referenced from: '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/libQt5Core.5.15.8.dylib'
  Reason: tried: '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../Frameworks/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/../lib/libicui18n.73.dylib' (no such file), '/usr/local/lib/libicui18n.73.dylib' (no such file), '/usr/lib/libicui18n.73.dylib' (no such file)
zsh: abort      /Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/bin/uic -h

The library is in the work/build area, NOT in the pkg area:
ehold_placehold_placehold_placehold_placehold_) brenda@Locals-MacBook-Air work % find /Users/brenda/miniconda3 -name libicui18n.73.dylib
/Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/lib/libicui18n.73.dylib

This is an International Components for Unicode (ICU) set of cross-platform Unicode-based gloablization libraries

find_package(Qt5 COMPONENTS Core Widgets REQUIRED)

Do I change the RPATH? Currently RPATH is set to CMAKE_INSTALL_PREFIX/lib.  Can I just add to that path?
or should I mess with the AUTOUIC settings in the cmake files?

looking for Qt5Config.cmake 


This script works ...

if [ -z ${CONDA_BUILD+x} ]; then
    source /Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work/build_env_setup.sh
fi
#!/bin/bash                                                                                                                                                                                                        

# These are the shell variables that are send by build_env_setup.sh
# export SRC_DIR="/Users/brenda/miniconda3/conda-bld/my-core2_1695166913185/work"
# export ROOT="/Users/brenda/miniconda3"
#
echo "PWD = " $(PWD)
echo "SRC_DIR = " $SRC_DIR
LROSE_CORE=${SRC_DIR}
echo "LROSE_CORE = " ${LROSE_CORE}
echo "shell is " ${SHELL}

export MY_PKG_DIR=/Users/brenda/miniconda3/pkgs
## change to source dir                                                                                                                                                                                            
# cd ${SRC_DIR}/code

## compile                                                                                                                                                                                                         
# ${CXX} -c hello_world.cc

## link                                                                                                                                                                                                            
# ${CXX} *.o -o hello_world

# g++ hello_world.cc -o hello_world

## install                                                                                                                                                                                                         
 # mkdir -p /tmp/mytest/bin
 # cp hello_world  /tmp/mytest/bin/.

# CONDA_PKG_DIR=/Users/brenda/miniconda3/pkgs
# QT_PATH=${CONDA_PKG_DIR}/qt-main-5.15.8-hc03889f_16/lib/cmake/Qt5
Qt5_DIR=/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/cmake/Qt5
echo "Qt5_DIR=" ${Qt5_DIR}
ls ${Qt5_DIR}
echo "**********"
#
# cd build/scripts; ./installPackageMakefiles.py --package=lrose-radx
#

export netCDF_INSTALL_PREFIX=/Users/brenda/miniconda3/pkgs/*netcdf*/lib;
#
# this regenerates the CMakeFileList.txt files, so if you run this command
# then edit and comment for qtplot, Hawk*, IpEye, and Sprite
#
# cd build/cmake; ./createCMakeLists.py --prefix=/tmp/mylrosetest2
# after running the above line (createCMakeLists.py) comment the CMakeFileList.txt files

cd ${SRC_DIR}/codebase; mkdir build;  cd build;  cmake ..

#  --debug-output -DnetCDF_INSTALL_PREFIX=/Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112  doesn't work
#  -DCMAKE_PREFIX_PATH=/Users/brenda/miniconda3/pkgs/qt-main-5.15.8-hc03889f_16/lib/cmake  doesn't work.
#

# export MY_NETCDF4_LDFLAGS=-L/Users/brenda/miniconda3/pkgs/libnetcdf-4.9.2-nompi_h6a32802_112/lib

cd ${SRC_DIR}/codebase/build/libs; make install
cd ${SRC_DIR}/codebase/build/apps/tdrp/src/tdrp_gen; make install
cd ${SRC_DIR}/codebase/build/apps; make install

--------  end of script that works --------

comment libs/rapplot
	libs/cidd
        apps/cidd
        apps/titan
TODO:
need to resolve X11 library; cidd and titan use this.
find a way to pass $SRC_DIR and other env variables to the CreateMakeList.txt for inclusion into the find_package cmake command.

actually, we need this path ...
find_package (Qt5 COMPONENTS Core Gui Widgets Network Qml REQUIRED PATHS /usr /Users/brenda/miniconda3/pkgs

maybe conda_build.sh   CreateCMakeLists --conda_src_dir=${SRC_DIR}  
then in CreateCMakeLists.py ... if (DEFINE CONDA_SRC_DIR) ...



---------

3/5/2024 try to recreate package using alpine docker image ...


"${SHELL}" <(curl -L micro.mamba.pm/install.sh)

# need to install curl and python 

# Install python/pip
ENV PYTHONUNBUFFERED=1
RUN apk add --update --no-cache python3 && ln -sf python3 /usr/bin/python
RUN python3 -m ensurepip
RUN pip3 install --no-cache --upgrade pip setuptools

RUN apk add curl

----
moving to rockylinux because alpine is not sufficient.

trying to use micromamba, instead of miniconda

Need to modify build.sh 
	HOST_OS
	CONDA_PKG_DIR
	QT_PATH ???
        Qt5_DIR

Need to modify meta.yaml
	???

Need to modify the CMAKE files somehow...

then run conda build .


  environment location: /home/gucci/micromamba/conda-bld/my-core2_1711410090118/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl


Source cache directory is: /home/gucci/micromamba/conda-bld/src_cache
WARNING: No hash (md5, sha1, sha256) provided for lrose-core-20230814.src.tgz.  Source download forced.  Add hash to recipe to use source cache.
Downloading source to cache: lrose-core-20230814.src.tgz
Downloading https://github.com/NCAR/lrose-core/releases/download/lrose-core-20230814/lrose-core-20230814.src.tgz
Success
Extracting download
source tree in: /home/gucci/micromamba/conda-bld/my-core2_1711410090118/work
export PREFIX=/home/gucci/micromamba/conda-bld/my-core2_1711410090118/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl
export SRC_DIR=/home/gucci/micromamba/conda-bld/my-core2_1711410090118/work
/home/gucci/micromamba/conda-bld/my-core2_1711410090118/work/conda_build.sh: line 5: PWD: command not found
PWD = 
SRC_DIR =  $SRC_DIR
LROSE_CORE =  $SRC_DIR
=============================================
Running createCMakeLists.py      :
  coreDir       :  /home/gucci/micromamba/conda-bld/my-core2_1711410090118/work
  codebaseDir   :  /home/gucci/micromamba/conda-bld/my-core2_1711410090118/work/codebase
  dependDirs    :  []
  libs dir      :  /home/gucci/micromamba/conda-bld/my-core2_1711410090118/work/codebase/libs
  apps dir      :  /home/gucci/micromamba/conda-bld/my-core2_1711410090118/work/codebase/apps
  install prefix dir:  /tmp/mylrosetest/bin
  static        :  False
  m32           :  False
  verboseMake   :  False
  withJasper    :  False


failed; probably need to comment the apps and libs that don't build; modify the CMAKE files?


3/26/2024

try again just building lrose-radx ...

modify the build.sh file to this ...
Qt5_DIR=$HOME/micromamba/pkgs/qt-main-5.15.8-hc03889f_16/lib/cmake/Qt5
cd build/scripts; ./installPackageMakefiles.py --package=lrose-radx           
cd build/cmake; ./createCMakeLists.py --silent  --prefix /tmp/mylrosetest/bin
cd ${SRC_DIR}/codebase; mkdir build;  cd build;  cmake ..

(base) [gucci@d32d7b735ddd package_area]$ conda build .

Extracting download
source tree in: /home/gucci/micromamba/conda-bld/my-core2_1711464251636/work
export PREFIX=/home/gucci/micromamba/conda-bld/my-core2_1711464251636/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl
export SRC_DIR=/home/gucci/micromamba/conda-bld/my-core2_1711464251636/work
/home/gucci/micromamba/conda-bld/my-core2_1711464251636/work/conda_build.sh: line 5: PWD: command not found
PWD = 
SRC_DIR =  $SRC_DIR
LROSE_CORE =  $SRC_DIR
Running installPackageMakefiles.py:
  package: lrose-radx
  osx:  False
  codebaseDir: /home/gucci/micromamba/conda-bld/my-core2_1711464251636/work/codebase
Searching for makefiles:  makefile.lrose-radx
/home/gucci/micromamba/conda-bld/my-core2_1711464251636/work/conda_build.sh: line 55: cd: build/cmake: No such file or directory

# >>>>>>>>>>>>>>>>>>>>>> ERROR REPORT <<<<<<<<<<<<<<<<<<<<<<

    Traceback (most recent call last):
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda/exception_handler.py", line 17, in __call__
        return func(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda/cli/main.py", line 83, in main_subshell
        exit_code = do_call(args, parser)
                    ^^^^^^^^^^^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda/cli/conda_argparse.py", line 172, in do_call
        result = plugin_subcommand.action(getattr(args, "_args", args))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/plugin.py", line 17, in build
        return execute(args)
               ^^^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/cli/main_build.py", line 581, in execute
        api.build(
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/api.py", line 250, in build
        return build_tree(
               ^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/build.py", line 3762, in build_tree
        packages_from_this = build(
                             ^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/build.py", line 2634, in build
        utils.check_call_env(
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/utils.py", line 408, in check_call_env
        return _func_defaulting_env_to_os_environ("call", *popenargs, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/home/gucci/micromamba/lib/python3.11/site-packages/conda_build/utils.py", line 384, in _func_defaulting_env_to_os_environ
        raise subprocess.CalledProcessError(proc.returncode, _args)
    subprocess.CalledProcessError: Command '['/bin/bash', '-o', 'errexit', '/home/gucci/micromamba/conda-bld/my-core2_1711464251636/work/conda_build.sh']' returned non-zero exit status 1.

`$ /home/gucci/micromamba/bin/conda build .`

  environment variables:
                 CIO_TEST=<not set>
    CONDA_ALLOW_SOFTLINKS=false
        CONDA_DEFAULT_ENV=base
             CONDA_PREFIX=/home/gucci/micromamba
    CONDA_PROMPT_MODIFIER=(base)
               CONDA_ROOT=/home/gucci/micromamba
              CONDA_SHLVL=1
           CURL_CA_BUNDLE=<not set>
               LD_PRELOAD=<not set>
                     PATH=/home/gucci/micromamba/bin:/condabin:/home/gucci/.local/bin:/home/gucc
                          i/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
       REQUESTS_CA_BUNDLE=<not set>
            SSL_CERT_FILE=<not set>

     active environment : base
    active env location : /home/gucci/micromamba
            shell level : 1
       user config file : /home/gucci/.condarc
 populated config files : /home/gucci/.condarc
          conda version : 24.1.2
    conda-build version : 24.3.0
         python version : 3.11.8.final.0
                 solver : libmamba (default)
       virtual packages : __archspec=1=x86_64_v4
                          __conda=24.1.2=0
                          __glibc=2.28=0
                          __linux=6.6.16=0
                          __unix=0=0
       base environment : /home/gucci/micromamba  (writable)
      conda av data dir : /home/gucci/micromamba/etc/conda
  conda av metadata url : None
           channel URLs : https://conda.anaconda.org/conda-forge/linux-64
                          https://conda.anaconda.org/conda-forge/noarch
          package cache : /home/gucci/micromamba/pkgs
                          /home/gucci/.conda/pkgs
       envs directories : /home/gucci/micromamba/envs
                          /home/gucci/.conda/envs
               platform : linux-64
             user-agent : conda/24.1.2 requests/2.31.0 CPython/3.11.8 Linux/6.6.16-linuxkit rocky/8.9 glibc/2.28 solver/libmamba conda-libmamba-solver/24.1.0 libmambapy/1.5.8
                UID:GID : 1000:1000
             netrc file : None
           offline mode : False



FIX: 
 55 # trouble with this line ... cd: build/cmake: No such file or directory
 56 cd build/cmake; ./createCMakeLists.py --prefix /tmp/mylrosetest/bin

SRC_DIR is like ... $HOME/micromamba/conda-bld/my-core2_1694565309776/work

so, do this ...

cd $SRC_DIR/build/cmake

The build.sh script gets moved into $SRC_DIR/conda_build.sh


errors:
CMake Error: CMake was unable to find a build program corresponding to "Unix Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage

Do I need to install the g++ compiler??
https://docs.conda.io/projects/conda-build/en/stable/resources/compiler-tools.html

I added g++ to the meta.yaml
Also, the SRC_DIR environment variable not sure how to access it in the script? ${SRC_DIR} or just $SRC_DIR
Also, does this variable conflict with the expected LROSE environment variables?

conda-build has problems with CMAKE because of the SYSROOT variable that CMAKE insists on using.
TRY: using the non CMAKE steps.

Try using mambabuild from boa
https://boa-build.readthedocs.io/en/latest/getting_started.html

$ conda mambabuild ...
$ boa bhild ...


still same CMAKE error ...
try ...
cmake -DCMAKE_CXX_COMPILER=/pathto/g++ -DCMAKE_C_COMPILER=/pathto/gcc /pathto/source

That removed the CMAKE_CXX_COMPILER errors.

Next error is  ...

CMake Error: CMake was unable to find a build program corresponding to "Unix Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.

I added make to the meta.yaml dependencies.

└─ c++_linux-64 does not exist (perhaps a typo or a missing channel).

I added the jinji directives and removed the CMAKE -D and now we have ...


-- The C compiler identification is GNU 13.2.0
-- The CXX compiler identification is GNU 13.2.0
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Check for working C compiler: $BUILD_PREFIX/bin/x86_64-conda-linux-gnu-cc - skipped
-- Detecting C compile features
-- Detecting C compile features - done
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Check for working CXX compiler: $BUILD_PREFIX/bin/x86_64-conda-linux-gnu-c++ - skipped
-- Detecting CXX compile features
-- Detecting CXX compile features - done
CMAKE_IGNORE_PREFIX_PATH: /home/gucci/anaconda3;/home/gucci/anaconda2
-- Found PkgConfig: $PREFIX/bin/pkg-config (found version "0.29.2")
-- Found X11: $PREFIX/include
-- Looking for XOpenDisplay in $PREFIX/lib/libX11.so;$PREFIX/lib/libXext.so
-- Looking for XOpenDisplay in $PREFIX/lib/libX11.so;$PREFIX/lib/libXext.so - found
-- Looking for gethostbyname
-- Looking for gethostbyname - found
-- Looking for connect
-- Looking for connect - found
-- Looking for remove
-- Looking for remove - found
-- Looking for shmat
-- Looking for shmat - found
-- Looking for IceConnectionNumber in ICE
-- Looking for IceConnectionNumber in ICE - found

which looks promising!

now getting this error for Qt5 ...

CMAKE_INSTALL_PREFIX is /tmp/mylrosetest/bin
CMake Error at libs/qtplot/src/CMakeLists.txt:20 (find_package):
  Could not find a package configuration file provided by "Qt5" with any of
  the following names:

    Qt5Config.cmake
    qt5-config.cmake

  Add the installation prefix of "Qt5" to CMAKE_PREFIX_PATH or set "Qt5_DIR"
  to a directory containing one of the above files.  If "Qt5" provides a
  separate development package or SDK, be sure it has been installed.

Need to change the search paths in the CMAKE files to look for the .cmake config files for Qt5 and for netcdf; see 10/20/2023

FIX: update the Qt5_DIR variable in the build.sh file
Did not work!!!

3/27/2024
Take a step back.  How do we want this to work?
The build.sh script is moved to $SRC_DIR/work/conda_build.sh
Then conda/mambabuild runs the conda_build.sh script.

We want the meta.yaml url to pull the release https://github.com/NCAR/lrose-core/releases/download ... lrose-core-version.src.tgz
Unzip, untar,
then run the conda_build.sh script.
The build.sh script has the steps to run cmake, create the make files, and cmake the software.
The problem is with the find package cmake directives, and the paths to Qt and netcdf.  
Conda/mambabuild will install the dependent packages (specified in the meta.yaml file) 
  in the $HOME/micromamba/pkg directory  AND this is where mambabuild wants to find the
*.cmake files for Qt and netcdf.

So, we need to modify the createCMakeFiles.py script somehow.  But, these changes need to be in a 
tarred release for download? or can we just pull from the head of the lrose-core repository?
I will need to pull from a branch, if I change the createCMakeFiles.py script. 

Ideally, it would be nice to pull from the repo, then we can do intermediate releases 
with patches.  *******

The source can be a git repo, shallow=1, or a local path.
Hmm, maybe I could try a local path in the container, to work out the CMake paths??

This fixes the issue with Qt5Config.cmake ...
in createCMakeLists.py

fo.write{'find_package (Qt5 COMPONENTS Core Gui Widgets Network Qml REQUIRED PATHS /usr ${SYS_PREFIX}/pkgs NO_DEFAULT_PATH)\n')

Do the same for netcdf, add the reference to ${SYS_PREFIX}/pkgs
------

3/29/2024
Branch lrose-core and work there.
Actually, I cloned the lrose-core repo and then -v to bring the lrose-core directory into 
the docker container at /tmp/lrose/core.
Then, just edit the CMake files in that directory structure, and use "src" for the
location of the source in meta.yaml.
----

docker run -it --rm conda-forge-pkg:rocky89 


# /home/gucci/micromamba/pkgs
# don't use the -DCMAKE stuff, instead add these to the requirements: build:

requirements:
  build:
    - gcc_linux-64
    - gxx_linux-64
    - gfortran_linux-64
    - make
    - cmake
    - {{ compiler('c') }}     <<=====
    - {{ compiler('cxx') }}     <<=====
  host:
    - eigen
    - fftw
    - flex
    - qt
    - libnetcdf
#    - szip
    - pkg-config
#    - geographiclib
#    - armadillo
#    - libomp
#    - libzip
#    - rsync
#    - xquartz
#    - {{ compiler('cxx') }}
  #host:
  #  - python
  #  - pip
  #run:
  #  - python


4/1/2024

  File "/home/gucci/micromamba/conda-bld/my-core2_1711988893438/work/build/cmake/./createCMakeLists.py", line 571
    fo.write{'find_package (Qt5 COMPONENTS Core Gui Widgets Network Qml REQUIRED PATHS /usr ${SYS_PREFIX}/pkgs NO_DEFAULT_PATH)\n'}
            ^
SyntaxError: invalid syntax

switch to mambabuild and find which variables are defined.  Is SYS_PREFIX even defined?

here are the environment variables available inside conda-build ...
https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html


I think the package built, but the test failed?

CMAKE_IGNORE_PREFIX_PATH: /home/gucci/anaconda3;/home/gucci/anaconda2
HDF5_INSTALL_PREFIX: /tmp/mylrosetest/bin
HDF5_C_INCLUDE_DIR: /tmp/mylrosetest/bin/include
CMAKE_INSTALL_PREFIX is /tmp/mylrosetest/bin
-- Configuring done (1.4s)
-- Generating done (1.6s)
-- Build files have been written to: $SRC_DIR/codebase/build
after cmake ..

Resource usage statistics from building my-core2:
   Process count: 3
   CPU time: Sys=0:00:00.8, User=0:00:00.8
   Memory: 36.4M
   Disk usage: 585.9K
   Time elapsed: 0:00:08.1


Packaging my-core2
INFO:conda_build.build:Packaging my-core2
INFO conda_build.build:build(2274): Packaging my-core2
Packaging my-core2-20230814-h3fd9d12_0
INFO:conda_build.build:Packaging my-core2-20230814-h3fd9d12_0
INFO conda_build.build:bundle_conda(1514): Packaging my-core2-20230814-h3fd9d12_0
No files or script found for output my-core2
WARNING:conda_build.build:No files or script found for output my-core2
WARNING conda_build.build:bundle_conda(1613): No files or script found for output my-core2
number of files: 0
Fixing permissions
path /home/gucci/micromamba/pkgs/gcc_impl_linux-64-13.2.0-h338b0a0_5/x86_64-conda-linux-gnu/lib/libtsan.so.2 is a broken symlink - ignoring copy

TEST START: /home/gucci/micromamba/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2
Traceback (most recent call last):
  File "/home/gucci/micromamba/lib/python3.6/site-packages/conda_package_handling/tarball.py", line 146, in extract
    _tar_xf(fn, dest_dir)
  File "/home/gucci/micromamba/lib/python3.6/site-packages/conda_package_handling/tarball.py", line 98, in _tar_xf
    archive_utils.extract_file(tarball)
  File "/home/gucci/micromamba/lib/python3.6/site-packages/conda_package_handling/archive_utils.py", line 15, in extract_file
    raise InvalidArchiveError(tarball, error_str.decode('utf-8'))
conda_package_handling.exceptions.InvalidArchiveError: Error with archive /home/gucci/micromamba/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2.  You probably need to delete and re-download or re-create this file.  Message from libarchive was:

------
– copy the file from a running container: docker cp imageid:/path/to/file localpath

the tar.bzip file is 5GB!!! it includes ALL the source files!


----

need this in the createCMakeFiles.py

        fo.write('find_package (Qt5 COMPONENTS Core Gui Widgets Network Qml REQUIRED PATHS /usr ${SYS_PREFIX}/pkgs NO_DEFAULT_PATH)\n')

are all of these packages supplied by conda-forge qt?
I cannot see where they are supplied.  

Next plan:
1. download and untar the 20230814 release.  
2. Change the createCMakefile.py script to include the required find_package line.
3. Bring this directory into the docker container,
$ docker run -v  /Users/brenda/git/lrose-core:/tmp/lrose-core --rm -it  conda-forge-pkg:rocky89 
4. set the src to 'path' in the meta.yaml file
5.  Does it build the package?
6. How big is the package?  < 5GB?


---


$ micromamba install boa -c conda-forge
$ micromamba activate base
$ conda mambabuild .  # this didn't work, says mambabuild is not found

$ micromamba install -y conda-build

$ conda build .


worked until here ...

CMake Error at /home/gucci/micromamba/conda-bld/my-core2_1712173321958/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5Gui/Qt5GuiConfigExtras.cmake:9 (message):
  Failed to find "GL/gl.h" in
  "/home/gucci/micromamba/conda-bld/my-core2_1712173321958/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/include;/usr/include/libdrm".
Call Stack (most recent call first):
  /home/gucci/micromamba/conda-bld/my-core2_1712173321958/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5Gui/Qt5GuiConfig.cmake:233 (include)
  /home/gucci/micromamba/conda-bld/my-core2_1712173321958/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5/Qt5Config.cmake:28 (find_package)
  CMakeLists.txt:46 (find_package)

FIX: removed cidd, qtplot, raplot, titan from libs/CMakeFiles.txt

add this to the meta.yaml file:

mesa-libgl-devel-cos7-aarch64 
before libnetcdf
Didn't work; same GL/gl.h error

Try using qt6  <== unknown package

    2  micromamba activate base
    # 3  micromamba install -y python=3.6 jupyter -c conda-forge # WHY jupyter???
    3  micromamba install -y python=3.6  -c conda-forge
    4  micromamba config append channels conda-forge; micromamba config set channel_priority strict
    5  micromamba activate base
    6 micromamba install -y  conda-build
    7 micromamba activate base

$ conda build --dirty  .


4/4/2024

getting this error ...

CMake Deprecation Warning at CMakeLists.txt:11 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.

==> the version is set here:
build/cmake/createCMakeLists.py:    fo.write('cmake_minimum_required(VERSION 3.0)\n')
build/cmake/createCMakeLists.py:    fo.write('if(${CMAKE_VERSION} VERSION_GREATER "3.17.0")\n')
build/cmake/createCMakeLists.py:    fo.write('if(${CMAKE_VERSION} VERSION_GREATER "3.10.0")\n')
build/cmake/createCMakeLists.py:    fo.write('if(${CMAKE_VERSION} VERSION_GREATER "3.13.0")\n')
---->



CMAKE_IGNORE_PREFIX_PATH: /home/gucci/anaconda3;/home/gucci/anaconda2
CMake Error at /home/gucci/micromamba/conda-bld/my-core2_1712186339259/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5Gui/Qt5GuiConfigExtras.cmake:9 (message):
  Failed to find "GL/gl.h" in
  "/home/gucci/micromamba/conda-bld/my-core2_1712186339259/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/include;/usr/include/libdrm".
Call Stack (most recent call first):
  /home/gucci/micromamba/conda-bld/my-core2_1712186339259/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5Gui/Qt5GuiConfig.cmake:233 (include)
  /home/gucci/micromamba/conda-bld/my-core2_1712186339259/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/lib/cmake/Qt5/Qt5Config.cmake:28 (find_package)
  CMakeLists.txt:46 (find_package)

------ end of GL/gl.h error message

cannot get past the GL/gl.h error

So, try using mamba ...
==> https://github.com/conda-forge/miniforge

==> Then install boa

and use mambabuild ...
==> $ conda mambabuild

==> change createCMakeFiles.py to use cmake minimum version 3.7

(base) [gucci@7f03fdc9be35 ~]$ conda search openGL
Loading channels: done
No match found for: opengl. Search: *opengl*
# Name                       Version           Build  Channel             
libglvnd-opengl-cos7-aarch64           1.0.1    h9b0a68f_105  conda-forge         
libglvnd-opengl-cos7-aarch64           1.0.1   h9b0a68f_1105  conda-forge         
libglvnd-opengl-cos7-aarch64           1.0.1    h9d98e8f_104  conda-forge         
libglvnd-opengl-cos7-aarch64           1.0.1   h9d98e8f_1104  conda-forge         
libglvnd-opengl-cos7-ppc64le           1.0.1    h9b0a68f_105  conda-forge         
libglvnd-opengl-cos7-ppc64le           1.0.1   h9b0a68f_1105  conda-forge         
libglvnd-opengl-cos7-ppc64le           1.0.1    h9d98e8f_104  conda-forge         
libglvnd-opengl-cos7-ppc64le           1.0.1   h9d98e8f_1104  conda-forge         
libglvnd-opengl-cos7-x86_64           1.0.1   h9b0a68f_1105  conda-forge         
libglvnd-opengl-cos7-x86_64           1.0.1   h9d98e8f_1104  conda-forge         
openglider                     0.0.7    pyhd8ed1ab_0  conda-forge         
openglider                   0.0.7.1    pyhd8ed1ab_0  conda-forge         
pyopengl                       3.1.0          py27_0  conda-forge         
pyopengl                       3.1.0          py34_0  conda-forge         
pyopengl                       3.1.0          py35_0  conda-forge         
pyopengl                       3.1.0          py36_0  conda-forge         
pyopengl                     3.1.1a1          py27_0  conda-forge         
pyopengl                     3.1.1a1          py35_0  conda-forge         
pyopengl                     3.1.1a1          py36_0  conda-forge         
pyopengl                     3.1.1a1            py_1  conda-forge         
pyopengl                     3.1.3b2            py_0  conda-forge         
pyopengl                     3.1.3b2            py_1  conda-forge         
pyopengl                       3.1.5            py_0  conda-forge         
pyopengl                       3.1.6    pyh6c4a22f_0  conda-forge         
pyopengl                       3.1.6    pyhd8ed1ab_1  conda-forge  

this was all useless.  The right answer was here ...
https://conda-forge.org/docs/maintainer/knowledge_base/#libgl


4/8/2024
The conda package (*.tar.bz2) contains all the build artifacts!  So, I need to put this somewhere else
3 2024-04-05 23:28 info/recipe/conda/conda-bld/my-core2_1712356673858/work/codebase/build/apps/physics/src/CalcHumidity/CMakeFiles/progress.mark


What is taking all that space in the conda package?
324 M for lrose-core ...

Knpwn bug, if the source is a path, conda build will copy all the source along with any symlinks.
To avoid this, use a url for the source.

So, I need to download the 20230814.tar.gz, apply the pactches, then tar and zip, upload to the lrosoe-testrelease repo, then use this as the url for conda build.

The patches are:
CMAKE min version 3.7
find_package(Qt ...)
Then, rebuild the container, without the source code copied in.
install mamba, boa, etc.
run conda mambabuild ....

Do a clean and strip after the build to remove the object files.


Note: run lrose-bootstrap/scripts/install_linux_packages.py to get the appropriate 3rd party packages.
Then, run createCMake.py
the install_linux_packages.py is called from the Dockerfiles.

eigen is only needed for FRACTL; and then it is not needed at all anymore. post 2024/04/08

4/9/2024
These variables are in the conda/conda-bld/my-core2_1712674099355/work/build_env_setup.sh file
export BUILD_PREFIX="/home/gucci/conda/conda-bld/my-core2_1712674099355/_build_env"
export SYS_PREFIX="/home/gucci/conda"
export SYS_PYTHON="/home/gucci/conda/bin/python3.10"
export SUBDIR="linux-64"
export build_platform="linux-64"
export SRC_DIR="/home/gucci/conda/conda-bld/my-core2_1712674099355/work"
export ROOT="/home/gucci/conda"

Maybe use BUILD_PREFIX as the install location for lrose??

CMAKE_IGNORE_PREFIX_PATH: /home/gucci/anaconda3;/home/gucci/anaconda2
X11_X11_INCLUDE_PATH: /home/gucci/conda/conda-bld/my-core2_1712674099355/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/include
X11_LIB_DIR: /home/gucci/conda/conda-bld/my-core2_1712674099355/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/lib
HDF5_INSTALL_PREFIX: /tmp/mylrosetest/bin
HDF5_C_INCLUDE_DIR: /tmp/mylrosetest/bin/include
CMAKE_INSTALL_PREFIX is /home/gucci/conda/conda-bld/my-core2_1712674099355/_build_env
-- Configuring done (1.4s)
-- Generating done (5.3s)
-- Build files have been written to: $SRC_DIR/codebase/build
after make ...
last line of build.sh

Resource usage statistics from building my-core2:
   Process count: 3
   CPU time: Sys=0:00:03.1, User=0:00:03.4
   Memory: 247.1M
   Disk usage: 324.0K
   Time elapsed: 0:00:13.0


Packaging my-core2
Packaging my-core2-20230814-h3fd9d12_0
WARNING: No files or script found for output my-core2



----

build.sh ...

cd $SRC_DIR/build/scripts; ./installPackageMakefiles.py --package=lrose-radx
# trouble with this line ... cd: build/cmake: No such file or directory
cd $SRC_DIR/build/cmake; ./createCMakeLists.py  --prefix $BUILD_PREFIX 
cmake ${SRC_DIR}/codebase



 Generating $SRC_DIR/build/cmake/apps/Radx/src/RadxPartRain

trying to debug this ...

cd $SRC_DIR/build/scripts; ./installPackageMakefiles.py --package=lrose-radx
# trouble with this line ... cd: build/cmake: No such file or directory
cd $SRC_DIR/build/cmake; ./createCMakeLists.py  --prefix $BUILD_PREFIX/junk
bash ${SRC_DIR}/build_env_setup.sh; cd ${SRC_DIR}/codebase/libs/Radx; make install
#   cmake  ${SRC_DIR}/codebase
#cd ${SRC_DIR}/codebase; mkdir -p build;  cd build;  cmake ..

The error is ...
make[6]: Entering directory '$SRC_DIR/codebase/libs/Radx/src/Bufr'
g++  -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-all -fno-plt -Og -g -Wall -Wextra -fvar-tracking-assignments -ffunction-sections -pipe -isystem $PREFIX/include -fdebug-prefix-map=$SRC_DIR=/usr/local/src/conda/my-core2-20230814 -fdebug-prefix-map=$PREFIX=/usr/local/src/conda-prefix -DLINUX_LROSE -D_BSD_TYPES -DF_UNDERSCORE2  -fPIC  -std=c++11 -fPIC -O2 -c -I../include  -I/opt/netcdf4/include -I/usr/local/netcdf4/include -I/usr/local/include  -I/opt/hdf5/include -I/usr/local/hdf5/include -I/usr/include/hdf5/serial  -I/opt/szip/include -I/usr/local/szip/include  -I/opt/zlib/include -I/usr/local/zlib/include  -I/opt/zlib/include -I/usr/local/zlib/include -I/tmp/mylrosetest/include   BufrFile.cc
make[6]: g++: No such file or directory


CMAKE_INSTALL_PREFIX is /home/gucci/conda/conda-bld/my-core2_1712674099355/_build_env/junk
-- Configuring done (1.0s)
-- Generating done (4.0s)
-- Build files have been written to: $SRC_DIR/build/cmake
after make ...


4/10/2024

I changed the build.sh file ...

----- build.sh -----

${BUILD_PREFIX}/bin/cmake \
	-H${SRC_DIR} \
	-Bmybuild \
	-DCMAKE_INSTALL_PREFIX=${PREFIX} \
	codebase

cd mybuild
make
make install

------ end of build.sh -----

Now I am getting the cmake progress information ...

[ 38%] Built target procmap
[ 38%] Building C object apps/procmap/src/procmap_register/CMakeFiles/procmap_register.dir/parse_args.c.o
[ 38%] Building C object apps/procmap/src/procmap_register/CMakeFiles/procmap_register.dir/procmap_register.c.o
[ 38%] Linking C executable procmap_register
/home/gucci/conda/conda-bld/my-core2_1712770415193/_build_env/bin/../lib/gcc/x86_64-conda-linux-gnu/13.2.0/../../../../x86_64-conda-linux-gnu/bin/ld: warning: libstdc++.so.6, needed by ../../../../libs/toolsa/src/libtoolsa.so, not found (try using -rpath or -rpath-link)
/home/gucci/conda/conda-bld/my-core2_1712770415193/_build_env/bin/../lib/gcc/x86_64-conda-linux-gnu/13.2.0/../../../../x86_64-conda-linux-gnu/bin/ld: ../../../../libs/toolsa/src/libtoolsa.so: undefined reference to `std::runtime_error::~runtime_error()@GLIBCXX_3.4'

FIX: remove procmap from the apps list ...
and other erring apps by editing this file ...
/home/gucci/conda/conda-bld/my-core2_1712775540678/work/codebase/apps/CMakeLists.txt 
then run 
conda mambabuild --dirty .


The tar.bz2 file contains a bunch of junk ...
-rw-r--r-- 0/0              70 2023-08-14 01:53 info/recipe/conda/conda-bld/my-core2_1712775540678/work/codebase/apps/titan/src/verify_day/.cvsignore

keep this ... The executables are here ...
_h_env_place... placeho/bin/RadxPrint


Try this ...
echo "after make ..."

rm -rf mybuild
rm -rf work/codebase
to clean up and reduce the 5GB tar file.

---

The local source tree that I can change with using --dirty option.
(base) [gucci@7faef489db3c ~]$ ls conda/conda-bld/my-core2_1712775540678/work/codebase/apps
then connect these changes to the tar.gz that is uploaded to url

SUB_DIRS = \
        tdrp \
        scripts \
        didss \
        ingest \
        dsserver \
        mdv_utils \
        physics \
        spdb_utils \
        filters \
        hydro \
        interp \
        radar \
        Radx 
 

OSError: Failed to copy /home/gucci/conda/conda-bld/my-core2_1712775540678/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho
  /share/qt/3rd_party_licenses/qtwebengine/src/3rdparty/chromium/third_party/devtools-frontend/src/node_modules/eslint-plugin-import/node_modules/debug/LICENSE to 

/home/gucci/conda/conda-bld/my-core2_1712775540678/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/info/recipe/conda/conda-bld/my-core2_1712775540678/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/share/qt/3rd_party_licenses/qtwebengine/src/3rdparty/chromium/third_party/devtools-frontend/src/node_modules/eslint-plugin-import/node_modules/debug/LICENSE.  

Error was: Command 'cp -a 
/home/gucci/conda/conda-bld/my-core2_1712775540678/
	_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho
	/share
	
	
	
	
	/qt
	
	
	/3rd_party_licenses
	/qtwebengine
	/src
	/3rdparty
	/chromium
	/third_party
	/devtools-frontend
	/src
	/node_modules
	/eslint-plugin-import
	/node_modules
	/debug
	/LICENSE 

		/home
	/gucci
	/conda
	/conda-bld
	/my-core2_1712775540678
	/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho
	/info
	/recipe
	/conda
	/conda-bld
	/my-core2_1712775540678
	/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho
	/share
	/qt
	/3rd_party_licenses
	/qtwebengine
	/src
	/3rdparty
	/chromium
	/third_party
	/devtools-frontend
	/src
	/node_modules
	/eslint-plugin-import
	/node_modules
	/debug
	/LICENSE' returned non-zero exit status 1.


FIX: remove radar from the apps to build ...

(base) [gucci@7faef489db3c ~]$ vi conda/conda-bld/my-core2_1712775540678/work/codebase/apps/CMakeLists.txt

# subdirectories

add_subdirectory (tdrp)
add_subdirectory (scripts)
#add_subdirectory (procmap)
# add_subdirectory (titan)
# add_subdirectory (trec)
# add_subdirectory (didss)
# add_subdirectory (ingest)
# add_subdirectory (dsserver)
# add_subdirectory (mdv_utils)
add_subdirectory (physics)
# add_subdirectory (satApps)
# add_subdirectory (spdb_utils)
# add_subdirectory (filters)
# add_subdirectory (awc)
# add_subdirectory (hydro)
# add_subdirectory (interp)
# add_subdirectory (radar)
# add_subdirectory (refractt)
add_subdirectory (Radx)
# add_subdirectory (cidd)
# add_subdirectory (spol)
# add_subdirectory (xpol) 

AND remove qt from the dependencies in the meta.yaml


Here is the build.sh

${BUILD_PREFIX}/bin/cmake \
	-H${SRC_DIR} \
	-Bmybuild \
	-DCMAKE_INSTALL_PREFIX=${PREFIX} \
	codebase

cd mybuild
make
make install


echo "after make ..."

rm -rf mybuild
rm -rf work/codebase
#ls /tmp/mylrosetest/bin

echo "last line of build.sh"

-----

here is the meta.yaml ...

ipackage:
  name: my-core2
  # name: lrose-core
  version: {{ version }}

source:
  # path: lrose-core  # DON"T USE PATH!! It generates a 5GB package
  # url for Mac OSX
  # url: https://github.com/NCAR/lrose-core/releases/download/lrose-core-{{ version }}/lrose-core-{{ version }}.src.mac_osx.tgz

  # url for linux
  # url: https://github.com/NCAR/lrose-core/releases/download/lrose-core-{{ version }}/lrose-core-{{ version }}.src.tgz
  # test url for linux
  url: https://github.com/NCAR/lrose-release-test/releases/download/lrose-core-20230814-test/lrose-core-20230814-test.tar.gz
  #sha256: f3832918bc3c66617f92e35f5d70729187676313caa60c187eb0f28b8fe5e3b5

build:
#  noarch: python
  number: 0
  #script: g++  hello_world.cc -o hello_world
  # script: build.sh


requirements:
  build:
    - gcc_linux-64
    - gxx_linux-64
    - gfortran_linux-64
    - make
    - cmake
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ cdt('mesa-libgl-devel') }}
  host:
    - eigen
    - fftw
    - flex
    - qt
    # - mesa-libgl-devel-cos7-aarch64
    #- libglvnd-opengl-cos7-x86_64
    - libnetcdf
#    - szip
    - pkg-config
#    - geographiclib
#    - armadillo
#    - libomp
#    - libzip
#    - rsync
#    - xquartz
#    - {{ compiler('cxx') }}
  #host:
  #  - python
  #  - pip
  #run:
  #  - python

#test:
  #imports:
    #- imagesize

#about:
  #home: http://lrose.net/
  #license: LROSE BSD
  #summary: 'LROSE: Lidar Radar Open Software Environment'
  #description: |
    # LROSE: Lidar Radar Open Software Environment
    # LROSE is suppoted by the  National Science Foundation (NSF) for the Lidar, Radar, and Profiler community.
  #dev_url: https://github.com/NCAR/lrose-core
  #doc_url: http://wiki.lrose.net/index.php/Main_Page
  #doc_source_url: http://wiki.lrose.net/index.php/Main_Page


------

Now, I find this about libGL ...

libGL
In addition to the required compilers {{ compiler('c') }} and/or {{ compiler('cxx') }}, the following CDT packages are required for linking against libGL:

requirements:
  build:
    - {{ cdt('mesa-libgl-devel') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libxext') }}     # [linux]
  host:
    - xorg-libxfixes  # [linux]

So, now meta.yaml is ...

requirements:
  build:
    - gcc_linux-64
    - gxx_linux-64
    - gfortran_linux-64
    - make
    - cmake
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ cdt('mesa-libgl-devel') }}
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libxext') }}     # [linux]
  host:
    #- eigen
    - fftw
    - flex
    #- qt
    - xorg-libxfixes  # [linux]
    # - mesa-libgl-devel-cos7-aarch64
    #- libglvnd-opengl-cos7-x86_64
    - libnetcdf
#    - szip
    - pkg-config
#    - geographiclib


NOTE: the package (.tar.bz2) file contains ...
conda/conda-bld/my-core2_xxx/work_moved_my-core2...

info/recipe/conda/conda-bld/my-core2_1712775540678/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/bin/RadxPrint IMPORTANT!


the conda/conda-bld/my-core2... contains ...
work_moved_my-core2...  X 
_build_env              ==> fine
work/mybuild            X 
work/docs		X
work/build		X
work/codebase		X


I deleted  ..
rm -rf mybuild
rm -rf work/codebase

Alright.  I am getting tired of this. 
I am going to trim down the *.tar.gz that is posted on the url.
make a Radx package
make a GUI apps package
make a FRACTL and SAMURAI package

4/12/2024
The trimmed down Radx only conda-forge package builds and the RadxPrint -h test runs successfully.  There is now an error when conda build works with the variants for tzdata.  The error is there is no "find" command in the container.  Hmmm.

I could try rebuilding the container and install findutils
yum install -y findutils
Then rebuild the conda-forge package???

-----

To copy the conda-forge package from the running container ...

$ docker ps  # to get the CONTAINER ID
(base) eol-antigua:conda_packaging brenda$ docker cp <container-id>:/home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2  .


Follow the steps here https://conda-forge.org/docs/maintainer/adding_pkgs/
to submit the package to conda-forge.

Is there a way to test it in the ERAD notebook by installing it as a file?

change the name of the package to lrose-core-radx-20240410 and then use the latest release? or
just use the 20240813 trimmed down release?

We  need the 20240410 release for SAMURAI, to fix the memory leak and the debug message.

4/15/2024
try a test install of the radx conda package.
1. open clean docker image with mamba only install (docker run --rm -it  conda-forge-pkg-mamba:rocky89v2)
2. download the tar.bz2 package from the lrose-release-test site
	a. install mamba
        b. mamba activate base
           mamba install libnetcdf
           mamba install fftw
	c. wget https://github.com/NCAR/lrose-release-test/releases/download/lrose-core-20230814-test/my-core2-20230814-h3fd9d12_0.tar.bz2
3. mamba install  <*.tar.bz2)
4. mamba activate base
5. RadxPrint -h
then this works. YEAH?!

Here are the steps 
(base) eol-antigua:conda_packaging brenda$ docker run --rm -it  conda-forge-pkg-mamba:rocky89v2
(base) [gucci@d6e49c0ab4f7 ~]$ history
    1  source "${HOME}/conda/etc/profile.d/conda.sh"
    2  source "${HOME}/conda/etc/profile.d/mamba.sh"
    3  mamba activate base
    4  mamba install libnetcdf
    5  wget https://github.com/NCAR/lrose-release-test/releases/download/lrose-core-20230814-test/my-core2-20230814-h3fd9d12_0.tar.bz2
    6  mamba activate base
    8  mamba install  my-core2-20230814-h3fd9d12_0.tar.bz2 
    9  RadxPrint -h
   11  mamba install fftw
   12  mamba activate base
   13  RadxPrint -h
   14  history


(base) [gucci@582cb07ba87c ~]$ mamba install --offline --verbose  my-core2-20230814-h3fd9d12_0.tar.bz2 
Preparing transaction: ...working... done
Verifying transaction: ...working... done
Executing transaction: ...working... done
(base) [gucci@582cb07ba87c ~]$ mamba activate base
(base) [gucci@582cb07ba87c ~]$ RadxPrint -h
RadxPrint: error while loading shared libraries: libnetcdf.so.19: cannot open shared object file: No such file or directory
(base) [gucci@582cb07ba87c ~]$

the Radx* binaries are installed, as well as the libRadx*,
but not libnetcdf ...

maybe build lrose with static lib objects?? With static libraries, there is no need
to find external libraries; if this can build, which it did earlier, then the
netcdf lib that lrose needs should be part of the executables.

  Usage: createCMakeLists.py [options]
--static              Create static lib objects. Default is shared

  cd ~/git/lrose-core/build/cmake
  ./createCMakeLists.py --static


----
cd build/cmake; ./createCMakeLists.py --static

--->> Writing CMakeLists.txt for app:  RadxVolTimingStats
      /home/gucci/conda/conda-bld/my-core2_1713276641136/work/codebase/apps/Radx/src/RadxVolTimingStats/CMakeLists.txt
=============================================
==>> CMakeLists.txt files created
==>>   nRecurse:  35
==>>   nLibs   :  26
==>>   nApps   :  52
==>>   nOther  :  1
==>>   nTotal  :  114
CMake Warning:
  Ignoring extra path from command line:

   "codebase"


CMake Error: The source directory "/home/gucci/conda/conda-bld/my-core2_1713276641136/work" does not appear to contain CMakeLists.txt.

------

(base) [gucci@582cb07ba87c ~]$ ls
Miniforge3.sh  build.sh  conda	meta.yaml  my-core2-20230814-h3fd9d12_0.tar.bz2  run_test.sh
(base) [gucci@582cb07ba87c ~]$ ls conda
LICENSE.txt	 conda-meta  include  pkgs   ssl
_conda		 condabin    lib      sbin   x86_64-conda-linux-gnu
bin		 envs	     libexec  share  x86_64-conda_cos6-linux-gnu
compiler_compat  etc	     man      shell
(base) [gucci@582cb07ba87c ~]$ ls conda/bin/Radx*
conda/bin/Radx2Dsr	 conda/bin/RadxDiffFields    conda/bin/RadxMon
conda/bin/Radx2Grid	 conda/bin/RadxDiffVol	     conda/bin/RadxPartRain
conda/bin/RadxBeamBlock  conda/bin/RadxDwellCombine  conda/bin/RadxPid
conda/bin/RadxBufr	 conda/bin/RadxEvad	     conda/bin/RadxPrint
conda/bin/RadxCalUpdate  conda/bin/RadxFilter	     conda/bin/RadxQc
conda/bin/RadxCheck	 conda/bin/RadxHca	     conda/bin/RadxQpe
conda/bin/RadxClutMon	 conda/bin/RadxKdp	     conda/bin/RadxRate
conda/bin/RadxClutter	 conda/bin/RadxMergeFields   conda/bin/RadxStats
conda/bin/RadxConvert	 conda/bin/RadxMergeVols     conda/bin/RadxSunMon
conda/bin/RadxCov2Mom	 conda/bin/RadxMesoCyclone   conda/bin/RadxTimeStats
conda/bin/RadxCreateVol  conda/bin/RadxModelQc	     conda/bin/RadxVolTimingStats
(base) [gucci@582cb07ba87c ~]$ ls conda/lib/*netcdf*
ls: cannot access 'conda/lib/*netcdf*': No such file or directory
(base) [gucci@582cb07ba87c ~]$ ls conda/lib/*Radx*
conda/lib/libRadx.so
(base) [gucci@582cb07ba87c ~]$ 

What is this?
info/recipe/conda/conda-bld/my-core2_1712952229407/work/lrose-netcdf/README.md


NOTE:
*** interesting information on the shared libraries and the missing libnetcdf.so.19 !!!
   INFO (my-core2,bin/RadxFilter): lib/libNcxx.so found in this package
   INFO (my-core2,bin/RadxFilter): lib/libphysics.so found in this package
   INFO (my-core2,bin/RadxFilter): Needed DSO lib/libnetcdf.so.19 found in conda-forge/linux-64::libnetcdf==4.9.2=nompi_h9612171_113
WARNING (my-core2,bin/RadxFilter): Needed DSO lib/libhdf5_hl.so.310 found in ['conda-forge/linux-64::hdf5==1.14.3=nompi_h4f84152_100']
WARNING (my-core2,bin/RadxFilter): .. but ['conda-forge/linux-64::hdf5==1.14.3=nompi_h4f84152_100'] not in reqs/run, (i.e. it is overlinking) (likely) or a missing dependency (less likely)
WARNING (my-core2,bin/RadxFilter): Needed DSO lib/libhdf5.so.310 found in ['conda-forge/linux-64::hdf5==1.14.3=nompi_h4f84152_100']
WARNING (my-core2,bin/RadxFilter): .. but ['conda-forge/linux-64::hdf5==1.14.3=nompi_h4f84152_100']
***  not in reqs/run, (i.e. it is overlinking) (likely) or a missing dependency (less likely) **

WARNING (my-core2,bin/RadxFilter): Needed DSO lib/libz.so.1 found in ['conda-forge/linux-64::libzlib==1.2.13=hd590300_5']
WARNING (my-core2,bin/RadxFilter): .. but ['conda-forge/linux-64::libzlib==1.2.13=hd590300_5'] not in reqs/run, (i.e. it is overlinking) (likely) or a missing dependency (less likely)
WARNING (my-core2,bin/RadxFilter): Needed DSO lib/libbz2.so.1.0 found in ['conda-forge/linux-64::bzip2==1.0.8=hd590300_5']
WARNING (my-core2,bin/RadxFilter): .. but ['conda-forge/linux-64::bzip2==1.0.8=hd590300_5'] not in reqs/run, (i.e. it is overlinking) (likely) or a missing dependency (less likely)
   INFO (my-core2,bin/RadxFilter): Needed DSO lib/libfftw3.so.3 found in conda-forge/linux-64::fftw==3.3.10=nompi_hc118613_108
   INFO (my-core2,bin/RadxFilter): Needed DSO x86_64-conda-linux-gnu/sysroot/lib64/libpthread.so.0 found in CDT/compiler package conda-forge/noarch::sysroot_linux-64==2.12=he073ed8_17
   INFO (my-core2,bin/RadxFilter): Needed DSO lib/libstdc++.so.6 found in conda-forge/linux-64::libstdcxx-ng==13.2.0=h7e041cc_5
   INFO (my-core2,bin/RadxFilter): Needed DSO x86_64-conda-linux-gnu/sysroot/lib64/libm.so.6 found in CDT/compiler package conda-forge/noarch::sysroot_linux-64==2.12=he073ed8_17
   INFO (my-core2,bin/RadxFilter): Needed DSO lib/libgcc_s.so.1 found in conda-forge/linux-64::libgcc-ng==13.2.0=h807b86a_5
   INFO (my-core2,bin/RadxFilter): Needed DSO x86_64-conda-linux-gnu/sysroot/lib64/libc.so.6 found in CDT/compiler package conda-forge/noarch::sysroot_linux-64==2.12=he073ed8_17
Fixing permissions
WARNING: path /home/gucci/conda/pkgs/gcc_impl_linux-64-13.2.0-h338b0a0_5/x86_64-conda-linux-gnu/lib/libatomic.so.1.2.0 is a broken symlink - ignoring copy


Just need to install libnetcdf and fftw in the running environment before running Radx* apps.


Typically, these should be in host dependency, not build. Build is for tools like make and compilers. Host is for stuff that is linked against. Run is for what the end-user needs. Also, most compiled libraries have run_exports, which means if one lists it in host, it will automatically get added to run (i.e., one shouldn't manually list them in run). Conda-build will use the version used in the host environment to define a constraint on compatible versions in the run.

-----

Now, consider samurai.  It does NOT need qt, AND ERAD needs samurai, so, I could try to build a package with the 20240410 release, use Radx, and samurai in a package.

What Linux flavor does the ERAD platform want?
Debian


I need to pare down the 20240410 release and upload it to the test-release Github repo
for samurai ...

grab samurai and fractl from the release page
cd samurai
cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local/lrose .
make install

for fractl, need ...

4/17/2024

WAIT!  Bundle samurai and fractl as separate conda-forge packages. Have them depend on specific version of lrose-core.

I guess it is time to submit lrose-core to conda-forge, but first, clean up the package labeling
 - package name
 - package version
 - build with *pared down* 20240410 release of LROSE
 - retest in clean container


TEST END: /home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2
Renaming work directory '/home/gucci/conda/conda-bld/my-core2_1713378621977/work' to '/home/gucci/conda/conda-bld/my-core2_1713378621977/work_moved_my-core2-20230814-h3fd9d12_0_linux-64_main_build_loop'
shutil.move(work)=/home/gucci/conda/conda-bld/my-core2_1713378621977/work, dest=/home/gucci/conda/conda-bld/my-core2_1713378621977/work_moved_my-core2-20230814-h3fd9d12_0_linux-64_main_build_loop)
Adding in variants from /home/gucci/conda/pkgs/tzdata-2024a-h0c530f3_0/info/recipe/conda_build_config.yaml
BUILD START: ['tzdata-2024a-h0c530f3_0.tar.bz2']

Why is there the tzdata-2024a-h0c530f3_0.tar.bz2 test failed??? Why is this being built and tested?
maybe remove python from the requirements/run list? No.  

Does libnetcdf and ?? in the requirements/run list remove the need to install these packages in the test environment? No. 

The Radx* apps are installed here: $HOME/conda/bin
my-core* is installed in $HOME/conda/pkgs

-rwxrwxr-x 0/0         1856544 2023-12-10 17:26 info/recipe/conda/conda-bld/my-core2_1713468236032/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeho/lib/libnetcdf.so.19 
So, why is the library not found when running RadxPrint -h ???

AND look! the source code is present in the tar.bz2 ...
-rw-r--r-- 0/0           14813 2023-08-14 01:53 info/recipe/conda/conda-bld/my-core2_1713468236032/work/codebase/apps/Radx/src/RadxPrint/RadxPrint.cc

Try to remove the codebase in the build.sh script?  with the source, the tar.bz2 is 1.7GB

The object files are NOT in the tar.bz2 file.  This is good!

4/24/2024
Q: Are the source files gone from the tarball?
No, the source files are still there!!!

Q: Is the findutils error gone?  (added findutils to the requirements/build list)
No.
/home/gucci/conda/conda-bld/tzdata_1713987008968/test_tmp/run_test.sh: line 16: find: command not found
+ dirs=
WARNING: Tests failed for tzdata-2024a-h0c530f3_0.tar.bz2 - moving package to /home/gucci/conda/conda-bld/broken
TESTS FAILED: tzdata-2024a-h0c530f3_0.tar.bz2

4/30/2024
I wonder if the lrose-core source to be deleted is here ${SRC_DIR}?
5/1/2024
try again with 
rm -rf ${SRC_DIR}/codebase

Yes! this worked! Now there is just this residual ...
(base) [gucci@0f042cb46034 ~]$ ls /home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2
/home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2
(base) [gucci@0f042cb46034 ~]$ tar -tvf /home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2 | grep RadxPrint.cc
-rw-rw-r-- 0/0           26057 2024-05-01 14:42 info/recipe/conda/conda-bld/my-core2_1714572943855/work/mybuild/apps/Radx/src/RadxPrint/CMakeFiles/RadxPrint.dir/RadxPrint.cc.o.d
-rw-rw-r-- 0/0           46312 2024-05-01 14:42 info/recipe/conda/conda-bld/my-core2_1714572943855/work/mybuild/apps/Radx/src/RadxPrint/CMakeFiles/RadxPrint.dir/RadxPrint.cc.o
(base) [gucci@0f042cb46034 ~]$ ls -lrt  /home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2
-rw-rw-r-- 1 gucci gucci 1801471297 May  1 14:54 /home/gucci/conda/conda-bld/linux-64/my-core2-20230814-h3fd9d12_0.tar.bz2


